/* -*- C -*- */
/*
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* $Id: roken.h.in,v 1.169 2002/08/26 21:43:38 assar Exp $ */

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <signal.h>

#ifdef _AIX
struct ether_addr;
struct sockaddr_dl;
#endif
#ifdef HAVE_SYS_PARAM_H
#include <sys/param.h>
#endif
#ifdef HAVE_INTTYPES_H
#include <inttypes.h>
#endif
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_SYS_BITYPES_H
#include <sys/bitypes.h>
#endif
#ifdef HAVE_BIND_BITYPES_H
#include <bind/bitypes.h>
#endif
#ifdef HAVE_NETINET_IN6_MACHTYPES_H
#include <netinet/in6_machtypes.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif
#ifdef HAVE_SYS_UIO_H
#include <sys/uio.h>
#endif
#ifdef HAVE_GRP_H
#include <grp.h>
#endif
#ifdef HAVE_SYS_STAT_H
#include <sys/stat.h>
#endif
#ifdef HAVE_NETINET_IN_H
#include <netinet/in.h>
#endif
#ifdef HAVE_NETINET_IN6_H
#include <netinet/in6.h>
#endif
#ifdef HAVE_NETINET6_IN6_H
#include <netinet6/in6.h>
#endif
#ifdef HAVE_ARPA_INET_H
#include <arpa/inet.h>
#endif
#ifdef HAVE_NETDB_H
#include <netdb.h>
#endif
#ifdef HAVE_ARPA_NAMESER_H
#include <arpa/nameser.h>
#endif
#ifdef HAVE_RESOLV_H
#include <resolv.h>
#endif
#ifdef HAVE_SYSLOG_H
#include <syslog.h>
#endif
#ifdef HAVE_FCNTL_H
#include <fcntl.h>
#endif
#ifdef HAVE_ERRNO_H
#include <errno.h>
#endif
#ifdef HAVE_ERR_H
#include <err.h>
#endif
#ifdef HAVE_TERMIOS_H
#include <termios.h>
#endif
#if defined(HAVE_SYS_IOCTL_H) && SunOS != 40
#include <sys/ioctl.h>
#endif
#ifdef TIME_WITH_SYS_TIME
#include <sys/time.h>
#include <time.h>
#elif defined(HAVE_SYS_TIME_H)
#include <sys/time.h>
#else
#include <time.h>
#endif

#ifdef HAVE_PATHS_H
#include <paths.h>
#endif


#ifndef ROKEN_LIB_FUNCTION
#if defined(__BORLANDC__)
#define ROKEN_LIB_FUNCTION /* not-ready-definition-yet */
#elif defined(_MSC_VER)
#define ROKEN_LIB_FUNCTION /* not-ready-definition-yet2 */
#else
#define ROKEN_LIB_FUNCTION
#endif
#endif

#ifndef HAVE_SSIZE_T
typedef int ssize_t;
#endif

#include <roken-common.h>

ROKEN_CPP_START

#if !defined(HAVE_SETSID) && defined(HAVE__SETSID)
#define setsid _setsid
#endif

#ifndef HAVE_PUTENV
int putenv(const char *string);
#endif

#if !defined(HAVE_SETENV) || defined(NEED_SETENV_PROTO)
int setenv(const char *var, const char *val, int rewrite);
#endif

#if !defined(HAVE_UNSETENV) || defined(NEED_UNSETENV_PROTO)
void unsetenv(const char *name);
#endif

#if !defined(HAVE_GETUSERSHELL) || defined(NEED_GETUSERSHELL_PROTO)
char *getusershell(void);
void endusershell(void);
#endif

#if !defined(HAVE_SNPRINTF) || defined(NEED_SNPRINTF_PROTO)
int snprintf (char *str, size_t sz, const char *format, ...)
     __attribute__ ((format (printf, 3, 4)));
#endif

#if !defined(HAVE_VSNPRINTF) || defined(NEED_VSNPRINTF_PROTO)
int vsnprintf (char *str, size_t sz, const char *format, va_list ap)
     __attribute__((format (printf, 3, 0)));
#endif

#if !defined(HAVE_ASPRINTF) || defined(NEED_ASPRINTF_PROTO)
int asprintf (char **ret, const char *format, ...)
     __attribute__ ((format (printf, 2, 3)));
#endif

#if !defined(HAVE_VASPRINTF) || defined(NEED_VASPRINTF_PROTO)
int vasprintf (char **ret, const char *format, va_list ap)
     __attribute__((format (printf, 2, 0)));
#endif

#if !defined(HAVE_ASNPRINTF) || defined(NEED_ASNPRINTF_PROTO)
int asnprintf (char **ret, size_t max_sz, const char *format, ...)
     __attribute__ ((format (printf, 3, 4)));
#endif

#if !defined(HAVE_VASNPRINTF) || defined(NEED_VASNPRINTF_PROTO)
int vasnprintf (char **ret, size_t max_sz, const char *format, va_list ap)
     __attribute__((format (printf, 3, 0)));
#endif

#ifndef HAVE_STRDUP
char * strdup(const char *old);
#endif

#if !defined(HAVE_STRNDUP) || defined(NEED_STRNDUP_PROTO)
char * strndup(const char *old, size_t sz);
#endif

#ifndef HAVE_STRLWR
char * strlwr(char *);
#endif

#ifndef HAVE_STRNLEN
size_t strnlen(const char*, size_t);
#endif

#if !defined(HAVE_STRSEP) || defined(NEED_STRSEP_PROTO)
char *strsep(char**, const char*);
#endif

#if !defined(HAVE_STRSEP_COPY) || defined(NEED_STRSEP_COPY_PROTO)
ssize_t strsep_copy(const char**, const char*, char*, size_t);
#endif

#ifndef HAVE_STRCASECMP
int strcasecmp(const char *s1, const char *s2);
#endif

#ifdef NEED_FCLOSE_PROTO
int fclose(FILE *);
#endif

#ifdef NEED_STRTOK_R_PROTO
char *strtok_r(char *s1, const char *s2, char **lasts);
#endif

#ifndef HAVE_STRUPR
char * strupr(char *);
#endif

#ifndef HAVE_STRLCPY
size_t strlcpy (char *dst, const char *src, size_t dst_sz);
#endif

#ifndef HAVE_STRLCAT
size_t strlcat (char *dst, const char *src, size_t dst_sz);
#endif

#ifndef HAVE_GETDTABLESIZE
int getdtablesize(void);
#endif

#if !defined(HAVE_STRERROR) && !defined(strerror)
char *strerror(int eno);
#endif

#if !defined(HAVE_HSTRERROR) || defined(NEED_HSTRERROR_PROTO)
/* This causes a fatal error under Psoriasis */
#if !(defined(SunOS) && (SunOS >= 50))
const char *hstrerror(int herr);
#endif
#endif

#ifndef HAVE_H_ERRNO_DECLARATION
extern int h_errno;
#endif

#if !defined(HAVE_INET_ATON) || defined(NEED_INET_ATON_PROTO)
int inet_aton(const char *cp, struct in_addr *adr);
#endif

#ifndef HAVE_INET_NTOP
const char *
inet_ntop(int af, const void *src, char *dst, size_t size);
#endif

#ifndef HAVE_INET_PTON
int
inet_pton(int af, const char *src, void *dst);
#endif

#if !defined(HAVE_GETCWD)
char* getcwd(char *path, size_t size);
#endif

#ifdef HAVE_PWD_H
#include <pwd.h>
struct passwd *k_getpwnam (const char *user);
struct passwd *k_getpwuid (uid_t uid);
#endif

const char *get_default_username (void);

#ifndef HAVE_SETEUID
int seteuid(uid_t euid);
#endif

#ifndef HAVE_SETEGID
int setegid(gid_t egid);
#endif

#ifndef HAVE_LSTAT
int lstat(const char *path, struct stat *buf);
#endif

#if !defined(HAVE_MKSTEMP) || defined(NEED_MKSTEMP_PROTO)
int mkstemp(char *);
#endif

#ifndef HAVE_CGETENT
int cgetent(char **buf, char **db_array, const char *name);
int cgetstr(char *buf, const char *cap, char **str);
#endif

#ifndef HAVE_INITGROUPS
int initgroups(const char *name, gid_t basegid);
#endif

#ifndef HAVE_FCHOWN
int fchown(int fd, uid_t owner, gid_t group);
#endif

#ifndef HAVE_DAEMON
int daemon(int nochdir, int noclose);
#endif

#ifndef HAVE_INNETGR
int innetgr(const char *netgroup, const char *machine, 
	    const char *user, const char *domain);
#endif

#ifndef HAVE_CHOWN
int chown(const char *path, uid_t owner, gid_t group);
#endif

#ifndef HAVE_RCMD
int rcmd(char **ahost, unsigned short inport, const char *locuser,
	 const char *remuser, const char *cmd, int *fd2p);
#endif

#if !defined(HAVE_INNETGR) || defined(NEED_INNETGR_PROTO)
int innetgr(const char*, const char*, const char*, const char*);
#endif

#ifndef HAVE_IRUSEROK
int iruserok(unsigned raddr, int superuser, const char *ruser,
	     const char *luser);
#endif

#if !defined(HAVE_GETHOSTNAME) || defined(NEED_GETHOSTNAME_PROTO)
int gethostname(char *name, int namelen);
#endif

#ifndef HAVE_WRITEV
ssize_t
writev(int d, const struct iovec *iov, int iovcnt);
#endif

#ifndef HAVE_READV
ssize_t
readv(int d, const struct iovec *iov, int iovcnt);
#endif

#ifndef HAVE_MKSTEMP
int
mkstemp(char *template);
#endif

#ifndef HAVE_PIDFILE
void pidfile (const char*);
#endif

#ifndef HAVE_BSWAP32
unsigned int bswap32(unsigned int);
#endif

#ifndef HAVE_BSWAP16
unsigned short bswap16(unsigned short);
#endif

#ifndef HAVE_FLOCK
#ifndef LOCK_SH
#define LOCK_SH   1		/* Shared lock */
#endif
#ifndef	LOCK_EX
#define LOCK_EX   2		/* Exclusive lock */
#endif
#ifndef LOCK_NB
#define LOCK_NB   4		/* Don't block when locking */
#endif
#ifndef LOCK_UN
#define LOCK_UN   8		/* Unlock */
#endif

int flock(int fd, int operation);
#endif /* HAVE_FLOCK */

time_t tm2time (struct tm tm, int local);

int unix_verify_user(char *user, char *password);

int roken_concat (char *s, size_t len, ...);

size_t roken_mconcat (char **s, size_t max_len, ...);

int roken_vconcat (char *s, size_t len, va_list args);

size_t roken_vmconcat (char **s, size_t max_len, va_list args);

ssize_t net_write (int fd, const void *buf, size_t nbytes);

ssize_t net_read (int fd, void *buf, size_t nbytes);

int issuid(void);

#ifndef HAVE_STRUCT_WINSIZE
struct winsize {
	unsigned short ws_row, ws_col;
	unsigned short ws_xpixel, ws_ypixel;
};
#endif

int get_window_size(int fd, struct winsize *);

#ifndef HAVE_VSYSLOG
void vsyslog(int pri, const char *fmt, va_list ap);
#endif

#ifndef HAVE_OPTARG_DECLARATION
extern char *optarg;
#endif
#ifndef HAVE_OPTIND_DECLARATION
extern int optind;
#endif
#ifndef HAVE_OPTERR_DECLARATION
extern int opterr;
#endif

#ifndef HAVE___PROGNAME_DECLARATION
extern const char *__progname;
#endif

#ifndef HAVE_ENVIRON_DECLARATION
extern char **environ;
#endif

#ifndef HAVE_GETIPNODEBYNAME
struct hostent *
getipnodebyname (const char *name, int af, int flags, int *error_num);
#endif

#ifndef HAVE_GETIPNODEBYADDR
struct hostent *
getipnodebyaddr (const void *src, size_t len, int af, int *error_num);
#endif

#ifndef HAVE_FREEHOSTENT
void
freehostent (struct hostent *h);
#endif

#ifndef HAVE_COPYHOSTENT
struct hostent *
copyhostent (const struct hostent *h);
#endif

#ifndef HAVE_SOCKLEN_T
typedef int socklen_t;
#endif

#ifndef HAVE_STRUCT_SOCKADDR_STORAGE

#ifndef HAVE_SA_FAMILY_T
typedef unsigned short sa_family_t;
#endif

#ifdef HAVE_IPV6
#define _SS_MAXSIZE sizeof(struct sockaddr_in6)
#else
#define _SS_MAXSIZE sizeof(struct sockaddr_in)
#endif

#define _SS_ALIGNSIZE	sizeof(unsigned long)

#if HAVE_STRUCT_SOCKADDR_SA_LEN

typedef unsigned char roken_sa_family_t;

#define _SS_PAD1SIZE   ((2 * _SS_ALIGNSIZE - sizeof (roken_sa_family_t) - sizeof(unsigned char)) % _SS_ALIGNSIZE)
#define _SS_PAD2SIZE   (_SS_MAXSIZE - (sizeof (roken_sa_family_t) + sizeof(unsigned char) + _SS_PAD1SIZE + _SS_ALIGNSIZE))

struct sockaddr_storage {
    unsigned char	ss_len;
    roken_sa_family_t	ss_family;
    char		__ss_pad1[_SS_PAD1SIZE];
    unsigned long	__ss_align[_SS_PAD2SIZE / sizeof(unsigned long) + 1];
};

#else /* !HAVE_STRUCT_SOCKADDR_SA_LEN */

typedef unsigned short roken_sa_family_t;

#define _SS_PAD1SIZE   ((2 * _SS_ALIGNSIZE - sizeof (roken_sa_family_t)) % _SS_ALIGNSIZE)
#define _SS_PAD2SIZE   (_SS_MAXSIZE - (sizeof (roken_sa_family_t) + _SS_PAD1SIZE + _SS_ALIGNSIZE))

struct sockaddr_storage {
    roken_sa_family_t	ss_family;
    char		__ss_pad1[_SS_PAD1SIZE];
    unsigned long	__ss_align[_SS_PAD2SIZE / sizeof(unsigned long) + 1];
};

#endif /* HAVE_STRUCT_SOCKADDR_SA_LEN */

#endif /* HAVE_STRUCT_SOCKADDR_STORAGE */

#ifndef HAVE_STRUCT_ADDRINFO
struct addrinfo {
    int    ai_flags;
    int    ai_family;
    int    ai_socktype;
    int    ai_protocol;
    size_t ai_addrlen;
    char  *ai_canonname;
    struct sockaddr *ai_addr;
    struct addrinfo *ai_next;
};
#endif

#ifndef HAVE_GETADDRINFO
int
getaddrinfo(const char *nodename,
	    const char *servname,
	    const struct addrinfo *hints,
	    struct addrinfo **res);
#endif

#ifndef HAVE_GETNAMEINFO
int getnameinfo(const struct sockaddr *sa, socklen_t salen,
		char *host, size_t hostlen,
		char *serv, size_t servlen,
		int flags);
#endif

#ifndef HAVE_FREEADDRINFO
void
freeaddrinfo(struct addrinfo *ai);
#endif

#ifndef HAVE_GAI_STRERROR
char *
gai_strerror(int ecode);
#endif

int
getnameinfo_verified(const struct sockaddr *sa, socklen_t salen,
		     char *host, size_t hostlen,
		     char *serv, size_t servlen,
		     int flags);

int roken_getaddrinfo_hostspec(const char *, int, struct addrinfo **); 
int roken_getaddrinfo_hostspec2(const char *, int, int, struct addrinfo **);

#ifndef HAVE_STRFTIME
size_t
strftime (char *buf, size_t maxsize, const char *format,
	  const struct tm *tm);
#endif

#ifndef HAVE_STRPTIME
char *
strptime (const char *buf, const char *format, struct tm *timeptr);
#endif

#ifndef HAVE_EMALLOC
void *emalloc (size_t);
#endif
#ifndef HAVE_ECALLOC
void *ecalloc(size_t num, size_t sz);
#endif
#ifndef HAVE_EREALLOC
void *erealloc (void *, size_t);
#endif
#ifndef HAVE_ESTRDUP
char *estrdup (const char *);
#endif

/*
 * kludges and such
 */

#if 1
int roken_gethostby_setup(const char*, const char*);
struct hostent* roken_gethostbyname(const char*);
struct hostent* roken_gethostbyaddr(const void*, size_t, int);
#else
#ifdef GETHOSTBYNAME_PROTO_COMPATIBLE
#define roken_gethostbyname(x) gethostbyname(x)
#else
#define roken_gethostbyname(x) gethostbyname((char *)x)
#endif

#ifdef GETHOSTBYADDR_PROTO_COMPATIBLE
#define roken_gethostbyaddr(a, l, t) gethostbyaddr(a, l, t)
#else
#define roken_gethostbyaddr(a, l, t) gethostbyaddr((char *)a, l, t)
#endif
#endif

#ifdef GETSERVBYNAME_PROTO_COMPATIBLE
#define roken_getservbyname(x,y) getservbyname(x,y)
#else
#define roken_getservbyname(x,y) getservbyname((char *)x, (char *)y)
#endif

#ifdef OPENLOG_PROTO_COMPATIBLE
#define roken_openlog(a,b,c) openlog(a,b,c)
#else
#define roken_openlog(a,b,c) openlog((char *)a,b,c)
#endif

#ifdef GETSOCKNAME_PROTO_COMPATIBLE
#define roken_getsockname(a,b,c) getsockname(a,b,c)
#else
#define roken_getsockname(a,b,c) getsockname(a, b, (void*)c)
#endif

#ifndef HAVE_SETPROGNAME
void setprogname(const char *argv0);
#endif

#ifndef HAVE_GETPROGNAME
const char *getprogname(void);
#endif

void mini_inetd_addrinfo (struct addrinfo*);
void mini_inetd (int port);

void set_progname(char *argv0);
const char *get_progname(void);

#ifndef HAVE_LOCALTIME_R
struct tm *
localtime_r(const time_t *timer, struct tm *result);
#endif

#if !defined(HAVE_STRSVIS) || defined(NEED_STRSVIS_PROTO)
int
strsvis(char *dst, const char *src, int flag, const char *extra);
#endif

#if !defined(HAVE_STRUNVIS) || defined(NEED_STRUNVIS_PROTO)
int
strunvis(char *dst, const char *src);
#endif

#if !defined(HAVE_STRVIS) || defined(NEED_STRVIS_PROTO)
int
strvis(char *dst, const char *src, int flag);
#endif

#if !defined(HAVE_STRVISX) || defined(NEED_STRVISX_PROTO)
int
strvisx(char *dst, const char *src, size_t len, int flag);
#endif

#if !defined(HAVE_SVIS) || defined(NEED_SVIS_PROTO)
char *
svis(char *dst, int c, int flag, int nextc, const char *extra);
#endif

#if !defined(HAVE_UNVIS) || defined(NEED_UNVIS_PROTO)
int
unvis(char *cp, int c, int *astate, int flag);
#endif

#if !defined(HAVE_VIS) || defined(NEED_VIS_PROTO)
char *
vis(char *dst, int c, int flag, int nextc);
#endif

ROKEN_CPP_END
