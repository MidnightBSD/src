.\"
.\" Copyright (C) 2001 Jason Evans <jasone@FreeBSD.org>.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice(s), this list of conditions and the following disclaimer as
.\"    the first lines of this file unmodified other than the possible
.\"    addition of one or more copyright notices.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice(s), this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) ``AS IS'' AND ANY
.\" EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
.\" DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
.\" DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
.\" CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
.\" DAMAGE.
.\"
.\" $FreeBSD: src/share/man/man9/sx.9,v 1.31 2005/01/12 21:48:25 ru Exp $
.\"
.Dd January 5, 2005
.Dt SX 9
.Os
.Sh NAME
.Nm sx ,
.Nm sx_init ,
.Nm sx_destroy ,
.Nm sx_slock ,
.Nm sx_xlock ,
.Nm sx_try_slock ,
.Nm sx_try_xlock ,
.Nm sx_sunlock ,
.Nm sx_xunlock ,
.Nm sx_try_upgrade ,
.Nm sx_downgrade ,
.Nm sx_assert ,
.Nm sx_unlock ,
.Nm SX_SYSINIT
.Nd kernel shared/exclusive lock
.Sh SYNOPSIS
.In sys/param.h
.In sys/lock.h
.In sys/sx.h
.Ft void
.Fn sx_init "struct sx *sx" "const char *description"
.Ft void
.Fn sx_destroy "struct sx *sx"
.Ft void
.Fn sx_slock "struct sx *sx"
.Ft void
.Fn sx_xlock "struct sx *sx"
.Ft int
.Fn sx_try_slock "struct sx *sx"
.Ft int
.Fn sx_try_xlock "struct sx *sx"
.Ft void
.Fn sx_sunlock "struct sx *sx"
.Ft void
.Fn sx_xunlock "struct sx *sx"
.Ft int
.Fn sx_try_upgrade "struct sx *sx"
.Ft void
.Fn sx_downgrade "struct sx *sx"
.Ft void
.Fn sx_assert "struct sx *sx" "int what"
.\"
.Ss Nm Ss utility macros
.Fn sx_unlock "struct sx *sx"
.Fn SX_SYSINIT "name" "struct sx *sx" "const char *description"
.\"
.Ss Kernel options
.Cd "options INVARIANTS"
.Cd "options INVARIANT_SUPPORT"
.Sh DESCRIPTION
Shared/exclusive locks are used to protect data that are read far more often
than they are written.
Mutexes are inherently more efficient than shared/exclusive locks, so
shared/exclusive locks should be used prudently.
.Pp
Shared/exclusive locks are created with
.Fn sx_init ,
where
.Fa sx
is a pointer to space for a
.Vt struct sx ,
and
.Fa description
is a pointer to a null-terminated character string that describes the
shared/exclusive lock.
Shared/exclusive locks are destroyed with
.Fn sx_destroy .
Threads acquire and release a shared lock by calling
.Fn sx_slock
or
.Fn sx_try_slock
and
.Fn sx_sunlock
or
.Fn sx_unlock .
Threads acquire and release an exclusive lock by calling
.Fn sx_xlock
or
.Fn sx_try_xlock
and
.Fn sx_xunlock
or
.Fn sx_unlock .
A thread can attempt to upgrade a currently held shared lock to an exclusive
lock by calling
.Fn sx_try_upgrade .
A thread that has an exclusive lock can downgrade it to a shared lock by
calling
.Fn sx_downgrade .
.Pp
.Fn sx_try_slock
and
.Fn sx_try_xlock
will return 0 if the shared/exclusive lock cannot be acquired immediately;
otherwise the shared/exclusive lock will be acquired and a non-zero value will
be returned.
.Pp
.Fn sx_try_upgrade
will return 0 if the shared lock cannot be upgraded to an exclusive lock
immediately; otherwise the exclusive lock will be acquired and a non-zero value
will be returned.
.Pp
When compiled with
.Cd "options INVARIANTS"
and
.Cd "options INVARIANT_SUPPORT" ,
the
.Fn sx_assert
function tests
.Fa sx
for the assertions specified in
.Fa what ,
and panics if they are not met.
The following assertions are supported:
.Bl -tag -width ".Dv SX_UNLOCKED"
.It Dv SX_LOCKED
Assert that the current thread has either a shared or an exclusive lock on the
.Vt sx
lock pointed to by the first argument.
.It Dv SX_SLOCKED
Assert that the current thread has a shared lock on the
.Vt sx
lock pointed to by
the first argument.
.It Dv SX_XLOCKED
Assert that the current thread has an exclusive lock on the
.Vt sx
lock pointed to
by the first argument.
.It Dv SX_UNLOCKED
Assert that the current thread has no lock on the
.Vt sx
lock pointed to
by the first argument.
.El
.Pp
For ease of programming,
.Fn sx_unlock
is provided as a macro frontend to the respective functions,
.Fn sx_sunlock
and
.Fn sx_xunlock .
Algorithms that are aware of what state the lock is in should use either
of the two specific functions for a minor performance benefit.
.Pp
The
.Fn SX_SYSINIT
macro is used to generate a call to the
.Fn sx_sysinit
routine at system startup in order to initialize a given
.Fa sx
lock.
The parameters are the same as
.Fn sx_init
but with an additional argument,
.Fa name ,
that is used in generating unique variable names for the related
structures associated with the lock and the sysinit routine.
.Pp
A thread may not hold both a shared lock and an exclusive lock on the same
lock simultaneously;
attempting to do so will result in deadlock.
.Sh CONTEXT
A thread may hold a shared or exclusive lock on an
.Nm
lock while sleeping.
As a result, an
.Nm
lock may not be acquired while holding a mutex.
Otherwise, if one thread slept while holding an
.Nm
lock while another thread blocked on the same
.Nm
lock after acquiring a mutex, then the second thread would effectively
end up sleeping while holding a mutex, which is not allowed.
.Sh SEE ALSO
.Xr condvar 9 ,
.Xr mtx_pool 9 ,
.Xr mutex 9 ,
.Xr panic 9 ,
.Xr sema 9
.Sh BUGS
Currently there is no way to assert that a lock is not held.
This is not possible in the
.No non- Ns Dv WITNESS
case for asserting that this thread
does not hold a shared lock.
In the
.No non- Ns Dv WITNESS
case, the
.Dv SX_LOCKED
and
.Dv SX_SLOCKED
assertions merely check that some thread holds a shared lock.
They do not ensure that the current thread holds a shared lock.
