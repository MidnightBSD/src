#!./perl

# We suppose that perl _mostly_ works at this moment, so may use
# sophisticated testing.

BEGIN {
    chdir 't' if -d 't';
    @INC = '../lib';              # pick up only this build's lib
}
delete $ENV{PERL5LIB};

my $torture; # torture testing?

use Test::Harness;
use strict;

$Test::Harness::switches = "";    # Too much noise otherwise
$Test::Harness::Verbose++ while @ARGV && $ARGV[0] eq '-v' && shift;

if ($ARGV[0] && $ARGV[0] eq '-torture') {
    shift;
    $torture = 1;
}

# Let tests know they're running in the perl core.  Useful for modules
# which live dual lives on CPAN.
$ENV{PERL_CORE} = 1;

#fudge DATA for now.
my %datahandle = qw(
		lib/bigint.t		1
		lib/bigintpm.t		1
		lib/bigfloat.t	 	1
		lib/bigfloatpm.t	1
		op/gv.t			1
		lib/complex.t		1
		lib/ph.t		1
		lib/soundex.t		1
		op/misc.t		1
		op/runlevel.t		1
		op/tie.t		1
		op/lex_assign.t		1
		);

foreach (keys %datahandle) {
     unlink "$_.t";
}

my (@tests, $re);

# [.VMS]TEST.COM calls harness with empty arguments, so clean-up @ARGV
@ARGV = grep $_ && length( $_ ) => @ARGV;

sub _populate_hash {
    return map {$_, 1} split /\s+/, $_[0];
}

# Generate T::H schedule rules that run the contents of each directory
# sequentially.
sub _seq_dir_rules {
    my @tests = @_;
    my %dir;
    for (@tests) {
        s{[^/]+$}{\*};
        $dir{$_}++;
    }

    return { par => [ map { { seq => $_ } } sort keys %dir ] };
}

sub _extract_tests;
sub _extract_tests {
    # This can probably be done more tersely with a map, but I doubt that it
    # would be as clear
    my @results;
    foreach (@_) {
	my $ref = ref $_;
	if ($ref) {
	    if ($ref eq 'ARRAY') {
		push @results, _extract_tests @$_;
	    } elsif ($ref eq 'HASH') {
		push @results, _extract_tests values %$_;
	    } else {
		die "Unknown reference type $ref";
	    }
	} else {
	    push @results, glob $_;
	}
    }
    @results;
}

if ($ARGV[0] && $ARGV[0]=~/^-re/) {
    if ($ARGV[0]!~/=/) {
        shift;
        $re=join "|",@ARGV;
        @ARGV=();
    } else {
        (undef,$re)=split/=/,shift;
    }
}

my $jobs = $ENV{TEST_JOBS};
my ($fork, $rules, $state);
if ($ENV{HARNESS_OPTIONS}) {
    for my $opt ( split /:/, $ENV{HARNESS_OPTIONS} ) {
        if ( $opt =~ /^j(\d*)$/ ) {
            $jobs ||= $1 || 9;
        }
        elsif ( $opt eq 'f' ) {
            $fork = 1;
        }
        elsif ( $opt eq 'c' ) {
#            $args->{color} = 1;
        }
        else {
            die "Unknown HARNESS_OPTIONS item: $opt\n";
        }
    }
}

if (@ARGV) {
    # If you want these run in speed order, just use prove
    if ($^O eq 'MSWin32') {
	@tests = map(glob($_),@ARGV);
    }
    else {
	@tests = @ARGV;
    }
} else {
    # Ideally we'd get somewhere close to Tux's Oslo rules
    # my $rules = {
    #     par => [
    #         { seq => '../ext/DB_File/t/*' },
    #         { seq => '../ext/IO_Compress_Zlib/t/*' },
    #         { seq => '../lib/CPANPLUS/*' },
    #         { seq => '../lib/ExtUtils/t/*' },
    #         '*'
    #     ]
    # };

    # but for now, run all directories in sequence. In particular, it would be
    # nice to get the tests in t/op/*.t able to run in parallel.

    unless (@tests) {
	my @seq = <base/*.t>;

	my @next = qw(comp cmd run io op uni mro lib);
	push @next, 'japh' if $torture;
	push @next, 'win32' if $^O eq 'MSWin32';
	# Hopefully TAP::Parser::Scheduler will support this syntax soon.
	# my $next = { par => '{' . join (',', @next) . '}/*.t' };
	my $next = { par => [
			     map { "$_/*.t" } @next
			    ] };
	@tests = _extract_tests ($next);

	# This is a bit of a game, because we only want to sort these tests in
	# speed order. base/*.t wants to run first, and ext,lib etc last and in
	# MANIFEST order
	if ($jobs) {
	    require App::Prove::State;
	    $state = App::Prove::State->new({ store => 'test_state' });
	    $state->apply_switch('slow', 'save');
	    # For some reason get_tests returns *all* the tests previously run,
	    # (in the right order), not simply the selection in @tests
	    # (in the right order). Not sure if this is a bug or a feature.
	    # Whatever, *we* are only interested in the ones that are in @tests
	    my %seen;
	    @seen{@tests} = ();
	    @tests = grep {exists $seen{$_} } $state->get_tests(0, @tests);
	}
	@tests = (@seq, @tests);
	push @seq, $next;

	my @last;
	use Config;
	my %skip;
	{
	    my %extensions = _populate_hash $Config{'extensions'};
	    my %known_extensions = _populate_hash $Config{'known_extensions'};
	    foreach (keys %known_extensions) {
		$skip{$_}++ unless $extensions{$_};
	    }
	}
	use File::Spec;
	my $updir = File::Spec->updir;
	my $mani  = File::Spec->catfile(File::Spec->updir, "MANIFEST");
	if (open(MANI, $mani)) {
	    my @manitests = ();
	    while (<MANI>) { # similar code in t/TEST
		if (m!^(ext/(\S+)/+(?:[^/\s]+\.t|test\.pl)|lib/\S+?(?:\.t|test\.pl))\s!) {
		    my ($test, $extension) = ($1, $2);
		    if (defined $extension) {
			$extension =~ s!/t$!!;
			# XXX Do I want to warn that I'm skipping these?
			next if $skip{$extension};
			my $flat_extension = $extension;
			$flat_extension =~ s!-!/!g;
			next if $skip{$flat_extension}; # Foo/Bar may live in Foo-Bar
		    }
		    push @manitests, File::Spec->catfile($updir, $test);
		}
	    }
	    close MANI;
	    # Sort the list of test files read from MANIFEST into a sensible
	    # order instead of using the order in which they are listed there
	    push @last, sort { lc $a cmp lc $b } @manitests;
	} else {
	    warn "$0: cannot open $mani: $!\n";
	}
	push @last, <pod/*.t>;
	push @last, <x2p/*.t>;

	push @tests, @last;

	push @seq, _seq_dir_rules @last;

	$rules = { seq => \@seq };
    }
}
if ($^O eq 'MSWin32') {
    s,\\,/,g for @tests;
}
@tests=grep /$re/, @tests 
    if $re;

if ($jobs) {
    eval 'use TAP::Harness 3.13; 1' or die $@;

    # Test::Harness parses $ENV{HARNESS_OPTIONS}, TAP::Harness does not
    local $ENV{HARNESS_OPTIONS};
    my $h = TAP::Harness->new({ jobs => $jobs, rules => $rules, ($fork ? (fork => $fork) : ())});
    if ($state) {
	$h->callback(
		     after_test => sub {
			 $state->observe_test(@_);
		     }
		    );
	$h->callback(
		     after_runtests => sub {
			 $state->commit(@_);
		     }
		    );
    }
    $h->callback(
		 parser_args => sub {
		     my ( $args, $test ) = @_;
		     push @{ $args->{switches} }, '-I../lib';
		 }
		);
    $h->runtests(@tests);
} else {
    Test::Harness::runtests @tests;
}
exit(0);
