Pull in r198385 from upstream llvm trunk (by David Blaikie):

  Reverting r193835 due to weirdness with Go...

  Apologies for the noise - we're seeing some Go failures with cgo
  interacting with Clang's debug info due to this change.

Introduced here: http://svnweb.freebsd.org/changeset/base/261991

Index: lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp
===================================================================
--- lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp
+++ lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp
@@ -1845,9 +1845,6 @@ void CompileUnit::constructMemberDIE(DIE &Buffer,
 
   addSourceLine(MemberDie, DT);
 
-  DIEBlock *MemLocationDie = new (DIEValueAllocator) DIEBlock();
-  addUInt(MemLocationDie, dwarf::DW_FORM_data1, dwarf::DW_OP_plus_uconst);
-
   if (DT.getTag() == dwarf::DW_TAG_inheritance && DT.isVirtual()) {
 
     // For C++, virtual base classes are not at fixed offset. Use following
@@ -1892,7 +1889,11 @@ void CompileUnit::constructMemberDIE(DIE &Buffer,
     } else
       // This is not a bitfield.
       OffsetInBytes = DT.getOffsetInBits() >> 3;
-    addUInt(MemberDie, dwarf::DW_AT_data_member_location, None, OffsetInBytes);
+
+    DIEBlock *MemLocationDie = new (DIEValueAllocator) DIEBlock();
+    addUInt(MemLocationDie, dwarf::DW_FORM_data1, dwarf::DW_OP_plus_uconst);
+    addUInt(MemLocationDie, dwarf::DW_FORM_udata, OffsetInBytes);
+    addBlock(MemberDie, dwarf::DW_AT_data_member_location, MemLocationDie);
   }
 
   if (DT.isProtected())
Index: test/DebugInfo/X86/data_member_location.ll
===================================================================
--- test/DebugInfo/X86/data_member_location.ll
+++ test/DebugInfo/X86/data_member_location.ll
@@ -11,11 +11,11 @@
 
 ; CHECK: DW_AT_name {{.*}} "c"
 ; CHECK-NOT: DW_TAG
-; CHECK: DW_AT_data_member_location {{.*}} (0x00)
+; CHECK: DW_AT_data_member_location {{.*}} (<0x02> 23 00 )
 
 ; CHECK: DW_AT_name {{.*}} "i"
 ; CHECK-NOT: DW_TAG
-; CHECK: DW_AT_data_member_location {{.*}} (0x04)
+; CHECK: DW_AT_data_member_location {{.*}} (<0x02> 23 04 )
 
 %struct.foo = type { i8, i32 }
 
Index: test/DebugInfo/X86/concrete_out_of_line.ll
===================================================================
--- test/DebugInfo/X86/concrete_out_of_line.ll
+++ test/DebugInfo/X86/concrete_out_of_line.ll
@@ -7,7 +7,7 @@
 ; first check that we have a TAG_subprogram at a given offset and it has
 ; AT_inline.
 
-; CHECK: 0x0000011c:   DW_TAG_subprogram [17]
+; CHECK: 0x0000011e:   DW_TAG_subprogram [17]
 ; CHECK-NEXT:     DW_AT_specification
 ; CHECK-NEXT:     DW_AT_inline
 
@@ -14,8 +14,8 @@
 
 ; and then that a TAG_subprogram refers to it with AT_abstract_origin.
 
-; CHECK: 0x0000015d:   DW_TAG_subprogram [19]
-; CHECK-NEXT: DW_AT_abstract_origin [DW_FORM_ref4]    (cu + 0x011c => {0x0000011c})
+; CHECK: 0x0000015f:   DW_TAG_subprogram [19]
+; CHECK-NEXT: DW_AT_abstract_origin [DW_FORM_ref4]    (cu + 0x011e => {0x0000011e})
 
 define i32 @_ZN17nsAutoRefCnt7ReleaseEv() {
 entry:
Index: test/DebugInfo/X86/generate-odr-hash.ll
===================================================================
--- test/DebugInfo/X86/generate-odr-hash.ll
+++ test/DebugInfo/X86/generate-odr-hash.ll
@@ -1,5 +1,8 @@
 ; REQUIRES: object-emission
 
+; Fail while investigating problem with non-block representations of member offsets.
+; XFAIL: *
+
 ; RUN: llc %s -o %t -filetype=obj -O0 -generate-odr-hash -mtriple=x86_64-unknown-linux-gnu
 ; RUN: llvm-dwarfdump -debug-dump=info %t | FileCheck %s
 ;
