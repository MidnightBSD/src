# Makefile for GNU F77 compiler runtime.
#   Copyright (C) 1995-1998, 2001, 2002, 2003 Free Software Foundation, Inc.
#   Contributed by Dave Love (d.love@dl.ac.uk).
#
#This file is part of GNU Fortran.
#
#GNU Fortran is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.
#
#GNU Fortran is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with GNU Fortran; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA
#02111-1307, USA.

SHELL = @SHELL@
PWD_COMMAND = $${PWDCMD-pwd}
MAKEOVERRIDES=
.NOEXPORTS:

#### Start of system configuration section. ####

srcdir = @glibcpp_srcdir@
VPATH = @glibcpp_srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
target_alias = @target_alias@
gcc_version = @gcc_version@
gcc_version_trigger = @gcc_version_trigger@
top_srcdir = @top_srcdir@
toplevel_srcdir = @toplevel_srcdir@
toolexecdir = @glibcpp_toolexecdir@
glibcpp_toolexecdir = @glibcpp_toolexecdir@
glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@

top_builddir = .

libdir = $(exec_prefix)/lib
libsubdir = $(libdir)/gcc/$(target_alias)/$(gcc_version)
#
# Versions should start at 0:0:0 - See libtool manual.
VERSION_MAJOR=0
VERSION_MINOR=0
VERSION_SUB=0

# Multilib support variables.
MULTISRCTOP =
MULTIBUILDTOP =
MULTIDIRS =
MULTISUBDIR =
MULTIDO = true
MULTICLEAN = true

# Not configured per top-level version, since that doesn't get passed
# Versions should start at 0:0:0 - See libtool manual.
# down at configure time, but overrridden by the top-level install
# target.
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

LIBTOOL = @LIBTOOL@
CC = @CC@
WARN_CFLAGS = -W -Wall
CFLAGS = @CFLAGS@
AR = @AR@
RANLIB = @RANLIB@

# List of variables to pass to sub-makes.
# Quote this way so that it can be used to set shell variables too.
FLAGS_TO_PASS= \
	CC='$(CC)' \
	LD='$(LD)' \
	LIBTOOL='$(LIBTOOL)' \
	WARN_CFLAGS='$(WARN_CFLAGS)' \
	CFLAGS='$(CFLAGS)' \
	CPPFLAGS='$(CPPFLAGS)' \
	DESTDIR='$(DESTDIR)' \
	AR='$(AR)' \
	RANLIB='$(RANLIB)' \
	prefix='$(prefix)' \
	exec_prefix='$(exec_prefix)' \
	libdir='$(libdir)' \
	libsubdir='$(libsubdir)' \
	tooldir='$(tooldir)'

LIBG2C_BASE = libg2c
LIBG2C = $(LIBG2C_BASE).la

SUBDIRS = libI77 libF77 libU77

F2CEXT = abort derf derfc ef1asc ef1cmc erf erfc exit getarg getenv iargc \
	signal system flush ftell fseek access besj0 besj1 besjn besy0 besy1 \
	besyn chdir chmod ctime dbesj0 dbesj1 dbesjn dbesy0 dbesy1 dbesyn \
	dtime etime fdate fgetc fget flush1 fnum fputc fput fstat gerror \
	getcwd getgid getlog getpid getuid gmtime hostnm idate ierrno irand \
	isatty itime kill link lnblnk lstat ltime mclock perror rand rename \
	secnds second sleep srand stat symlnk time ttynam umask unlink \
	vxttim alarm \
	date_y2kbuggy date_y2kbug vxtidt_y2kbuggy vxtidt_y2kbug

.SUFFIXES:

# The logic here is partly dictated by the desire to keep the lib?77
# subdirs for compatibility with the Netlib version and because libU77
# has a different copyright; then the libe77 bit (EXTERNALly-callable
# versions) is funny.  Given that, as well as keeping things as simple
# as possible we want (at least) the following:
#  * Allow make to be run at the top level (all-target-libf2c), at this
#    level, or the subdirs of this level.  In the latter case we only
#    compile, rather than updating libg2c.a;
#  * A robust set of dependencies, so that we rebuild (as little as
#    possible) if a configuration file, g2c.h or any lib?77/*.c file
#    changes;
#  * Avoid unnecessary running of ar and ranlib;
#  * Expose parallelism where reasonable, but not as a priority.

# The intended top-level target here does a non-multilib build (via
# the dependency) and then (perhaps) builds multilibs.

all: all-unilib
	: $(MAKE) ; exec $(MULTIDO) $(FLAGS_TO_PASS) multi-do DO="all-unilib"

# `all-unilib' is the overall target in the absence of multilibs,
# meant to be invoked via multi-do for multilibs.

# Its dependencies can be satisfied in parallel.  The [fiu]77 targets
# update stamp files (object file lists, actually, see the subdir
# makefiles) on which the $(LIBG2C) depends.  The stamp files
# s-lib[fiu]77 are intentionally not targets, since we're only meant
# to come in at the level of this target.  The [fiu]77 targets always
# invoke sub makes to check dependencies in the subdirs, else we'd
# have to maintain them at this level; we live with the overhead of
# some recursive makes which may do nothing.

all-unilib: i77 f77 u77 s-libe77
	$(MAKE) $(FLAGS_TO_PASS) $(LIBG2C)

i77 f77 u77: g2c.h

# This target should normally only get invoked via `all-unilib' --
# after all's well in the subdirs -- actually to assemble the library.
# The stamp files contain the object lists of each component of the
# library.  The point of breaking them up is to avoid command-line
# length limitations.

$(LIBG2C): s-libi77 s-libf77 s-libu77 s-libe77
	$(LIBTOOL) --mode=link $(CC) -o $@ \
	  -version-info $(VERSION_MAJOR):$(VERSION_MINOR):$(VERSION_SUB) \
	  -rpath $(glibcpp_toolexeclibdir) \
	  -objectlist s-libe77 \
	  -objectlist s-libf77 \
	  -objectlist s-libi77 \
	  -objectlist s-libu77 \
	  -lm

i77:
	cd libI77; $(MAKE) $(FLAGS_TO_PASS) all

f77:
	cd libF77; $(MAKE) $(FLAGS_TO_PASS) all

u77:
	cd libU77; $(MAKE) $(FLAGS_TO_PASS) all

s-libe77: f2cext.c
	if [ -d libE77 ]; then rm -f libE77/*.o libE77/*.lo; else mkdir libE77; fi
	-rm -f $@.T $@
	for name in $(F2CEXT); \
	do \
	  echo $${name}; \
	  $(LIBTOOL) --mode=compile $(CC) -c -I. -I$(srcdir) -I../../include \
	    $(CPPFLAGS) $(WARN_CFLAGS) $(CFLAGS) -DL$${name} $(srcdir)/f2cext.c \
	    -o libE77/L$${name}.lo ; \
	  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \
	  echo libE77/L$${name}.lo >> $@.T; \
	done
	mv $@.T $@

f2cext.c: g2c.h

${srcdir}/configure: configure.in
	rm -f config.cache
	cd $(srcdir) && autoconf

# Dependence on Makefile serializes for parallel make.
g2c.h: g2c.hin config.status Makefile
# Might try to avoid rebuilding everything if Makefile or configure
# changes and g2c.h doesn't; see also the Makefile rule.  Should
# depend on another stamp file rather than using the commented-out
# lines below, since g2c.h isn't necessarily brought up to date.
#	mv g2c.h g2c.x
	$(SHELL) config.status
#	$(SHELL) $(srcdir)/../move-if-change g2c.h g2c.x && mv g2c.x g2c.h

Makefile: Makefile.in config.status
# Autoconf doc uses `./config.status'.  Is there a good reason to use $(SHELL)?
	  $(SHELL) config.status

config.status: configure $(gcc_version_trigger)
# Make sure we don't pick up a site config file and that configure
# gets run with correct values of variables such as CC.
	CONFIG_SITE=no-such-file $(FLAGS_TO_PASS) \
	  $(SHELL) config.status --recheck

info install-info clean-info dvi TAGS dist installcheck installdirs:

check:
	cd libU77; $(MAKE) G77DIR=../../../gcc/ check

install: all
	$(SHELL) $(toplevel_srcdir)/mkinstalldirs $(DESTDIR)$(glibcpp_toolexeclibdir)
	$(LIBTOOL) --mode=install $(INSTALL) $(LIBG2C) $(DESTDIR)$(glibcpp_toolexeclibdir)
	$(INSTALL_DATA) libfrtbegin.a $(DESTDIR)$(glibcpp_toolexeclibdir)
	$(RANLIB) $(DESTDIR)$(glibcpp_toolexeclibdir)/libfrtbegin.a
	$(INSTALL_DATA) g2c.h $(DESTDIR)$(libsubdir)/include/g2c.h
	$(MULTIDO) $(FLAGS_TO_PASS) multi-do DO="$@"
	@-$(LIBTOOL) --mode=finish $(DESTDIR)$(glibcpp_toolexeclibdir)

install-strip:
	$(MAKE) INSTALL_PROGRAM='$(INSTALL_PROGRAM) -s' install

uninstall:
	rm -f $(DESTDIR)$(libsubdir)/include/g2c.h
	rm -f $(DESTDIR)$(glibcpp_toolexeclibdir)/libfrtbegin.a
	$(LIBTOOL) --mode=uninstall rm -f $(DESTDIR)$(glibcpp_toolexeclibdir)$(LIBG2C_BASE).la
	$(MULTIDO) $(FLAGS_TO_PASS) multi-do DO="$@"

mostlyclean:
	rm -f $(LIBG2C) objlist
	$(MAKE) DO=$@ DODIRS="$(SUBDIRS)" $(FLAGS_TO_PASS) subdir_do; \
	$(MULTICLEAN) multi-clean DO=$@
	rm -fr libE77 s-libe77

clean: mostlyclean
	rm -f config.log
	$(MAKE) DO=$@ DODIRS="$(SUBDIRS)" $(FLAGS_TO_PASS) subdir_do; \
	$(MULTICLEAN) multi-clean DO=$@
	rm -rf .libs

distclean: clean
	rm -f g2c.h s-libe77
	$(MAKE) DO=$@ DODIRS="$(SUBDIRS)" $(FLAGS_TO_PASS) subdir_do; \
	$(MULTICLEAN) multi-clean DO=distclean
	rm -f config.cache config.status Makefile

maintainer-clean:

rebuilt: configure

.PHONY: rebuilt mostlyclean clean distclean maintainer-clean all \
        i77 f77 u77 check uninstall install-strip dist \
        installcheck installdirs all-unilib

subdir_do:
	@rootpre=`${PWD_COMMAND}`/; export rootpre; \
	srcrootpre=`cd $(srcdir); ${PWD_COMMAND}`/; export srcrootpre; \
	for i in .. $(DODIRS); do \
	  if [ x$$i != x.. ]; then \
	    if [ -f ./$$i/Makefile ]; then \
	      if (cd ./$$i; $(MAKE) $(FLAGS_TO_PASS) $(DO)); then \
		true; \
	      else \
		exit 1; \
	      fi; \
	    else true; fi; \
	  else true; fi; \
	done

# multidoings may be added here by configure.
