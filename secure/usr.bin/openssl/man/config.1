.\" Automatically generated by Pod::Man version 1.15
.\" Sun Jan 12 18:05:02 2003
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "config 3"
.TH config 3 "0.9.7" "2003-01-12" "OpenSSL"
.UC
.SH "NAME"
config \- OpenSSL \s-1CONF\s0 library configuration files
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The OpenSSL \s-1CONF\s0 library can be used to read configuration files.
It is used for the OpenSSL master configuration file \fBopenssl.cnf\fR
and in a few other places like \fB\s-1SPKAC\s0\fR files and certificate extension
files for the \fBx509\fR utility.
.PP
A configuration file is divided into a number of sections. Each section
starts with a line \fB[ section_name ]\fR and ends when a new section is
started or end of file is reached. A section name can consist of
alphanumeric characters and underscores.
.PP
The first section of a configuration file is special and is referred
to as the \fBdefault\fR section this is usually unnamed and is from the
start of file until the first named section. When a name is being looked up
it is first looked up in a named section (if any) and then the
default section.
.PP
The environment is mapped onto a section called \fB\s-1ENV\s0\fR.
.PP
Comments can be included by preceding them with the \fB#\fR character
.PP
Each section in a configuration file consists of a number of name and
value pairs of the form \fBname=value\fR
.PP
The \fBname\fR string can contain any alphanumeric characters as well as
a few punctuation symbols such as \fB.\fR \fB,\fR \fB;\fR and \fB_\fR.
.PP
The \fBvalue\fR string consists of the string following the \fB=\fR character
until end of line with any leading and trailing white space removed.
.PP
The value string undergoes variable expansion. This can be done by
including the form \fB$var\fR or \fB${var}\fR: this will substitute the value
of the named variable in the current section. It is also possible to
substitute a value from another section using the syntax \fB$section::name\fR
or \fB${section::name}\fR. By using the form \fB$ENV::name\fR environment
variables can be substituted. It is also possible to assign values to
environment variables by using the name \fB\s-1ENV:\s0:name\fR, this will work
if the program looks up environment variables using the \fB\s-1CONF\s0\fR library
instead of calling \fB\f(BIgetenv()\fB\fR directly.
.PP
It is possible to escape certain characters by using any kind of quote
or the \fB\e\fR character. By making the last character of a line a \fB\e\fR
a \fBvalue\fR string can be spread across multiple lines. In addition
the sequences \fB\en\fR, \fB\er\fR, \fB\eb\fR and \fB\et\fR are recognized.
.SH "NOTES"
.IX Header "NOTES"
If a configuration file attempts to expand a variable that doesn't exist
then an error is flagged and the file will not load. This can happen
if an attempt is made to expand an environment variable that doesn't
exist. For example the default OpenSSL master configuration file used
the value of \fB\s-1HOME\s0\fR which may not be defined on non Unix systems.
.PP
This can be worked around by including a \fBdefault\fR section to provide
a default value: then if the environment lookup fails the default value
will be used instead. For this to work properly the default value must
be defined earlier in the configuration file than the expansion. See
the \fB\s-1EXAMPLES\s0\fR section for an example of how to do this.
.PP
If the same variable exists in the same section then all but the last
value will be silently ignored. In certain circumstances such as with
DNs the same field may occur multiple times. This is usually worked
around by ignoring any characters before an initial \fB.\fR e.g.
.PP
.Vb 2
\& 1.OU="My first OU"
\& 2.OU="My Second OU"
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Here is a sample configuration file using some of the features
mentioned above.
.PP
.Vb 1
\& # This is the default section.
.Ve
.Vb 3
\& HOME=/temp
\& RANDFILE= ${ENV::HOME}/.rnd
\& configdir=$ENV::HOME/config
.Ve
.Vb 1
\& [ section_one ]
.Ve
.Vb 1
\& # We are now in section one.
.Ve
.Vb 2
\& # Quotes permit leading and trailing whitespace
\& any = " any variable name "
.Ve
.Vb 3
\& other = A string that can \e
\& cover several lines \e
\& by including \e\e characters
.Ve
.Vb 1
\& message = Hello World\en
.Ve
.Vb 1
\& [ section_two ]
.Ve
.Vb 1
\& greeting = $section_one::message
.Ve
This next example shows how to expand environment variables safely.
.PP
Suppose you want a variable called \fBtmpfile\fR to refer to a
temporary filename. The directory it is placed in can determined by
the the \fB\s-1TEMP\s0\fR or \fB\s-1TMP\s0\fR environment variables but they may not be
set to any value at all. If you just include the environment variable
names and the variable doesn't exist then this will cause an error when
an attempt is made to load the configuration file. By making use of the
default section both values can be looked up with \fB\s-1TEMP\s0\fR taking 
priority and \fB/tmp\fR used if neither is defined:
.PP
.Vb 5
\& TMP=/tmp
\& # The above value is used if TMP isn't in the environment
\& TEMP=$ENV::TMP
\& # The above value is used if TEMP isn't in the environment
\& tmpfile=${ENV::TEMP}/tmp.filename
.Ve
.SH "BUGS"
.IX Header "BUGS"
Currently there is no way to include characters using the octal \fB\ennn\fR
form. Strings are all null terminated so nulls cannot form part of
the value.
.PP
The escaping isn't quite right: if you want to use sequences like \fB\en\fR
you can't use any quote escaping on the same line.
.PP
Files are loaded in a single pass. This means that an variable expansion
will only work if the variables referenced are defined earlier in the
file.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
x509(1), req(1), ca(1)
