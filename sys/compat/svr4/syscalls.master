 $FreeBSD$
;	from: @(#)syscalls.master	8.1 (Berkeley) 7/19/93
;
; System call name/number master file (or rather, slave, from SVR4).
; Processed to create svr4_sysent.c, svr4_syscalls.c and svr4_syscall.h.

; Columns: number type nargs name alt{name,tag,rtyp}/comments
;	number	system call number, must be in order
;	audit	the audit event associated with the system call
;		A value of AUE_NULL means no auditing, but it also means that
;		there is no audit event for the call at this time. For the
;		case where the event exists, but we don't want auditing, the
;		event should be #defined to AUE_NULL in audit_kevents.h.
;	type	one of STD, OBSOL, UNIMPL, COMPAT
;	name	psuedo-prototype of syscall routine
;		If one of the following alts is different, then all appear:
;	altname	name of system call if different
;	alttag	name of args struct tag if different from [o]`name'"_args"
;	altrtyp	return type if not int (bogus - syscalls always return int)
;		for UNIMPL/OBSOL, name continues with comments

; types:
;	STD	always included
;	COMPAT	included on COMPAT #ifdef
;	OBSOL	obsolete, not included in system, only specifies name
;	UNIMPL	not implemented, placeholder only

; #ifdef's, etc. may be included, and are copied to the output files.

#include <sys/types.h>
#include <sys/sysent.h>
#include <sys/sysproto.h>
#include <netinet/in.h>

#include <compat/svr4/svr4.h>
#include <compat/svr4/svr4_types.h>
#include <compat/svr4/svr4_signal.h>
#include <compat/svr4/svr4_proto.h>

0	AUE_NULL	UNIMPL	unused
1	AUE_NULL	NOPROTO	{ void sys_exit(int rval); } exit \
				    sys_exit_args void
2	AUE_NULL	NOPROTO	{ int fork(void); }
3	AUE_NULL	NOPROTO	{ int read(int fd, char *buf, u_int nbyte); }
4	AUE_NULL	NOPROTO	{ int write(int fd, char *buf, u_int nbyte); }
5	AUE_NULL	STD	{ int svr4_sys_open(char *path, int flags, \
				    int mode); }
6	AUE_NULL	NOPROTO	{ int close(int fd); }
7	AUE_NULL	STD	{ int svr4_sys_wait(int *status); }
8	AUE_NULL	STD	{ int svr4_sys_creat(char *path, int mode); }
9	AUE_NULL	NOPROTO	{ int link(char *path, char *link); }
10	AUE_NULL	NOPROTO	{ int unlink(char *path); }
11	AUE_NULL	STD	{ int svr4_sys_execv(char *path, char **argp); }
12	AUE_NULL	NOPROTO	{ int chdir(char *path); }
13	AUE_NULL	STD	{ int svr4_sys_time(time_t *t); }
14	AUE_NULL	STD	{ int svr4_sys_mknod(char* path, int mode, int dev); }
15	AUE_NULL	NOPROTO	{ int chmod(char *path, int mode); }
16	AUE_NULL	NOPROTO	{ int chown(char *path, uid_t uid, gid_t gid); }
17	AUE_NULL	STD	{ int svr4_sys_break(caddr_t nsize); }
18	AUE_NULL	STD	{ int svr4_sys_stat(char* path, \
				    struct svr4_stat* ub); }
19	AUE_NULL	NOPROTO	{ int lseek(int filedes, off_t *offset, \
				    int whence); }
20	AUE_NULL	NOPROTO	{ pid_t getpid(void); }
21	AUE_NULL	UNIMPL	old_mount
22	AUE_NULL	UNIMPL	sysv_umount
23	AUE_NULL	NOPROTO	{ int setuid(uid_t uid); }
24	AUE_NULL	NOPROTO	{ uid_t getuid(void); }
25	AUE_NULL	UNIMPL	stime
26	AUE_NULL	UNIMPL	ptrace
27	AUE_NULL	STD	{ int svr4_sys_alarm(unsigned sec); }
28	AUE_NULL	STD	{ int svr4_sys_fstat(int fd, \
				    struct svr4_stat *sb); }
29	AUE_NULL	STD	{ int svr4_sys_pause(void); }
30	AUE_NULL	STD	{ int svr4_sys_utime(char *path, \
				    struct svr4_utimbuf *ubuf); }
31	AUE_NULL	UNIMPL	stty
32	AUE_NULL	UNIMPL	gtty
33	AUE_NULL	STD	{ int svr4_sys_access(char *path, \
				    int amode); }
34	AUE_NULL	STD	{ int svr4_sys_nice(int prio); }
35	AUE_NULL	UNIMPL	statfs
36	AUE_NULL	NOPROTO	{ int sync(void); }
37	AUE_NULL	STD	{ int svr4_sys_kill(int pid, int signum); }
38	AUE_NULL	UNIMPL	fstatfs
39	AUE_NULL	STD	{ int svr4_sys_pgrpsys(int cmd, int pid, \
				    int pgid); }
40	AUE_NULL	UNIMPL	xenix
41	AUE_NULL	NOPROTO	{ int dup(u_int fd); }
42	AUE_NULL	STD	{ int svr4_pipe(void); }
43	AUE_NULL	STD	{ int svr4_sys_times(struct tms *tp); }
44	AUE_NULL	UNIMPL	profil
45	AUE_NULL	UNIMPL	plock
46	AUE_NULL	NOPROTO	{ int setgid(gid_t gid); }
47	AUE_NULL	NOPROTO	{ gid_t getgid(void); }
48	AUE_NULL	STD	{ int svr4_sys_signal(int signum, \
				    svr4_sig_t handler); }
49	AUE_NULL	STD	{ int svr4_sys_msgsys(int what, int a2, \
				    int a3, int a4, int a5); }
50	AUE_NULL	STD	{ int svr4_sys_sysarch(int op, void *a1); }
51	AUE_NULL	UNIMPL	acct
52	AUE_NULL	STD	{ int svr4_sys_shmsys(int what, int a2, \
				    int a3, int a4, int a5); }
53	AUE_NULL	STD	{ int svr4_sys_semsys(int what, int a2, \
				    int a3, int a4, int a5); }
54	AUE_NULL	STD	{ int svr4_sys_ioctl(int fd, u_long com, \
				    caddr_t data); }
55	AUE_NULL	UNIMPL	uadmin
56	AUE_NULL	UNIMPL	exch
57	AUE_NULL	STD	{ int svr4_sys_utssys(void *a1, void *a2, \
				    int sel, void *a3); }
58	AUE_NULL	NOPROTO	{ int fsync(int fd); }
59	AUE_NULL	STD	{ int svr4_sys_execve(char *path, \
				    char **argp, char **envp); }
60	AUE_NULL	NOPROTO	{ int umask(int newmask); }
61	AUE_NULL	NOPROTO	{ int chroot(char *path); }
62	AUE_NULL	STD	{ int svr4_sys_fcntl(int fd, int cmd, \
				    char *arg); }
63	AUE_NULL	STD	{ int svr4_sys_ulimit(int cmd, \
				    long newlimit); }
64	AUE_NULL	UNIMPL	reserved
65	AUE_NULL	UNIMPL	reserved
66	AUE_NULL	UNIMPL	reserved
67	AUE_NULL	UNIMPL	reserved
68	AUE_NULL	UNIMPL	reserved
69	AUE_NULL	UNIMPL	reserved
70	AUE_NULL	UNIMPL	advfs
71	AUE_NULL	UNIMPL	unadvfs
72	AUE_NULL	UNIMPL	rmount
73	AUE_NULL	UNIMPL	rumount
74	AUE_NULL	UNIMPL	rfstart
75	AUE_NULL	UNIMPL	sigret
76	AUE_NULL	UNIMPL	rdebug
77	AUE_NULL	UNIMPL	rfstop
78	AUE_NULL	UNIMPL	rfsys
79	AUE_NULL	NOPROTO	{ int rmdir(char *path); }
80	AUE_NULL	NOPROTO	{ int mkdir(char *path, int mode); }
81	AUE_NULL	STD	{ int svr4_sys_getdents(int fd, char *buf, \
				    int nbytes); }
82	AUE_NULL	UNIMPL	libattach
83	AUE_NULL	UNIMPL	libdetach
84	AUE_NULL	UNIMPL	sysfs
85	AUE_NULL	STD	{ int svr4_sys_getmsg(int fd, \
				    struct svr4_strbuf *ctl, \
				    struct svr4_strbuf *dat, int *flags); }
86	AUE_NULL	STD	{ int svr4_sys_putmsg(int fd, \
				    struct svr4_strbuf *ctl, \
				    struct svr4_strbuf *dat, int flags); }
87	AUE_NULL	STD	{ int svr4_sys_poll(struct pollfd *fds, \
				    unsigned int nfds, int timeout); }
88	AUE_NULL	STD	{ int svr4_sys_lstat(char *path, \
				    struct svr4_stat *ub); }
89	AUE_NULL	NOPROTO	{ int symlink(char *path, char *link); }
90	AUE_NULL	NOPROTO	{ int readlink(char *path, char *buf, \
				    int count); }
91	AUE_NULL	NOPROTO	{ int getgroups(u_int gidsetsize, \
				    gid_t *gidset); }
92	AUE_NULL	NOPROTO	{ int setgroups(u_int gidsetsize, \
				    gid_t *gidset); }
93	AUE_NULL	NOPROTO	{ int fchmod(int fd, int mode); }
94	AUE_NULL	NOPROTO	{ int fchown(int fd, int uid, int gid); }
95	AUE_NULL	STD	{ int svr4_sys_sigprocmask(int how, \
				    svr4_sigset_t *set, \
				    svr4_sigset_t *oset); }
96	AUE_NULL	STD	{ int svr4_sys_sigsuspend( \
				    svr4_sigset_t *ss); }
97	AUE_NULL	STD	{ int svr4_sys_sigaltstack( \
				    struct svr4_sigaltstack *nss, \
				    struct svr4_sigaltstack *oss); }
98	AUE_NULL	STD	{ int svr4_sys_sigaction(int signum, \
				    struct svr4_sigaction *nsa, \
				    struct svr4_sigaction *osa); }
99	AUE_NULL	STD	{ int svr4_sys_sigpending(int what, \
				    svr4_sigset_t *mask); }
100	AUE_NULL	STD	{ int svr4_sys_context(int func, \
				    struct svr4_ucontext *uc); }
101	AUE_NULL	UNIMPL	evsys
102	AUE_NULL	UNIMPL	evtrapret
103	AUE_NULL	STD	{ int svr4_sys_statvfs(char *path, \
				    struct svr4_statvfs *fs); }
104	AUE_NULL	STD	{ int svr4_sys_fstatvfs(int fd, \
				    struct svr4_statvfs *fs); }
105	AUE_NULL	UNIMPL	whoknows
106	AUE_NULL	UNIMPL	nfssvc
107	AUE_NULL	STD	{ int svr4_sys_waitsys(int grp, int id, \
				    union svr4_siginfo *info, int options); }
108	AUE_NULL	UNIMPL	sigsendsys
109	AUE_NULL	STD	{ int svr4_sys_hrtsys(int cmd, int fun, \
				    int sub, void *rv1, void *rv2); }
110	AUE_NULL	UNIMPL	acancel
111	AUE_NULL	UNIMPL	async
112	AUE_NULL	UNIMPL	priocntlsys
113	AUE_NULL	STD	{ int svr4_sys_pathconf(char *path, \
				    int name); }
114	AUE_NULL	UNIMPL	mincore
115	AUE_NULL	STD	{ caddr_t svr4_sys_mmap(caddr_t addr, \
				    svr4_size_t len, int prot, int flags, \
				    int fd, svr4_off_t pos); }
116	AUE_NULL	NOPROTO	{ int mprotect(void *addr, int len, \
				    int prot); }
117	AUE_NULL	NOPROTO	{ int munmap(void *addr, int len); }
118	AUE_NULL	STD	{ int svr4_sys_fpathconf(int fd, int name); }
119	AUE_NULL	NOPROTO	{ int vfork(void); }
120	AUE_NULL	NOPROTO	{ int fchdir(int fd); }
121	AUE_NULL	NOPROTO	{ int readv(int fd, struct iovec *iovp, \
				    u_int iovcnt); }
122	AUE_NULL	NOPROTO	{ int writev(int fd, struct iovec *iovp, \
				    u_int iovcnt); }
123	AUE_NULL	STD	{ int svr4_sys_xstat(int two, char *path, \
				    struct svr4_xstat *ub); }
124	AUE_NULL	STD	{ int svr4_sys_lxstat(int two, char *path, \
				    struct svr4_xstat *ub); }
125	AUE_NULL	STD	{ int svr4_sys_fxstat(int two, int fd, \
				    struct svr4_xstat *sb); }
126	AUE_NULL	STD	{ int svr4_sys_xmknod(int two, char *path, \
				    svr4_mode_t mode, svr4_dev_t dev); }
127	AUE_NULL	UNIMPL	clocal
128	AUE_NULL	STD	{ int svr4_sys_setrlimit(int which, \
				    const struct svr4_rlimit *rlp); }
129	AUE_NULL	STD	{ int svr4_sys_getrlimit(int which, \
				    struct svr4_rlimit *rlp); }
130	AUE_NULL	NOPROTO	{ int lchown(char *path, uid_t uid, \
				    gid_t gid); }
131	AUE_NULL	STD	{ int svr4_sys_memcntl(void * addr, \
				    svr4_size_t len, int cmd, void * arg, \
				    int attr, int mask); }
132	AUE_NULL	UNIMPL	getpmsg
133	AUE_NULL	UNIMPL	putpmsg
134	AUE_NULL	NOPROTO	{ int rename(char *from, char *to); }
135	AUE_NULL	STD	{ int svr4_sys_uname( \
				    struct svr4_utsname* name, int dummy); }
136	AUE_NULL	NOPROTO	{ int setegid(gid_t egid); }
137	AUE_NULL	STD	{ int svr4_sys_sysconfig(int name); }
138	AUE_NULL	NOPROTO	{ int adjtime(struct timeval *delta, \
				    struct timeval *olddelta); }
139	AUE_NULL	STD	{ long svr4_sys_systeminfo(int what, \
				    char *buf, long len); }
140	AUE_NULL	UNIMPL	notused
141	AUE_NULL	NOPROTO	{ int seteuid(uid_t euid); }
142	AUE_NULL	UNIMPL	vtrace
; fork1
143	AUE_NULL	UNIMPL	{ int fork(void); } 
144	AUE_NULL	UNIMPL	sigtimedwait
145	AUE_NULL	UNIMPL	lwp_info
146	AUE_NULL	UNIMPL	yield
147	AUE_NULL	UNIMPL	lwp_sema_wait
148	AUE_NULL	UNIMPL	lwp_sema_post
149	AUE_NULL	UNIMPL	lwp_sema_trywait
150	AUE_NULL	UNIMPL	notused
151	AUE_NULL	UNIMPL	notused
152	AUE_NULL	UNIMPL	modctl
153	AUE_NULL	STD	{ int svr4_sys_fchroot(int fd); }
154	AUE_NULL	STD	{ int svr4_sys_utimes(char *path, \
				    struct timeval *tptr); }
155	AUE_NULL	STD	{ int svr4_sys_vhangup(void); }
156	AUE_NULL	STD	{ int svr4_sys_gettimeofday( \
				    struct timeval *tp); }
157	AUE_NULL	NOPROTO	{ int getitimer(u_int which, \
				    struct itimerval *itv); }
158	AUE_NULL	NOPROTO	{ int setitimer(u_int which, \
				    struct itimerval *itv, \
				    struct itimerval *oitv); }
159	AUE_NULL	UNIMPL	lwp_create
160	AUE_NULL	UNIMPL	lwp_exit
161	AUE_NULL	UNIMPL	lwp_suspend
162	AUE_NULL	UNIMPL	lwp_continue
163	AUE_NULL	UNIMPL	lwp_kill
164	AUE_NULL	UNIMPL	lwp_self
165	AUE_NULL	UNIMPL	lwp_getprivate
166	AUE_NULL	UNIMPL	lwp_setprivate
167	AUE_NULL	UNIMPL	lwp_wait
168	AUE_NULL	UNIMPL	lwp_mutex_unlock
169	AUE_NULL	UNIMPL	lwp_mutex_lock
170	AUE_NULL	UNIMPL	lwp_cond_wait
171	AUE_NULL	UNIMPL	lwp_cond_signal
172	AUE_NULL	UNIMPL	lwp_cond_broadcast
173	AUE_NULL	UNIMPL	{ ssize_t svr4_sys_pread(int fd, void *buf, \
				    size_t nbyte, svr4_off_t off); }
174	AUE_NULL	UNIMPL	{ ssize_t svr4_sys_pwrite(int fd, \
				    const void *buf, size_t nbyte, \
				    svr4_off_t off); }
175	AUE_NULL	STD	{ svr4_off64_t svr4_sys_llseek(int fd, \
				    long offset1, long offset2, int whence); }
176	AUE_NULL	UNIMPL	inst_sync
177	AUE_NULL	UNIMPL	whoknows
178	AUE_NULL	UNIMPL	kaio
179	AUE_NULL	UNIMPL	whoknows
180	AUE_NULL	UNIMPL	whoknows
181	AUE_NULL	UNIMPL	whoknows
182	AUE_NULL	UNIMPL	whoknows
183	AUE_NULL	UNIMPL	whoknows
184	AUE_NULL	UNIMPL	tsolsys
185	AUE_NULL	STD	{ int svr4_sys_acl(char *path, int cmd, \
				    int num, struct svr4_aclent *buf); }
186	AUE_NULL	STD	{ int svr4_sys_auditsys(int code, int a1, \
				    int a2, int a3, int a4, int a5); }
187	AUE_NULL	UNIMPL	processor_bind
188	AUE_NULL	UNIMPL	processor_info
189	AUE_NULL	UNIMPL	p_online
190	AUE_NULL	UNIMPL	sigqueue
191	AUE_NULL	UNIMPL	clock_gettime
192	AUE_NULL	UNIMPL	clock_settime
193	AUE_NULL	UNIMPL	clock_getres
194	AUE_NULL	UNIMPL	timer_create
195	AUE_NULL	UNIMPL	timer_delete
196	AUE_NULL	UNIMPL	timer_settime
197	AUE_NULL	UNIMPL	timer_gettime
198	AUE_NULL	UNIMPL	timer_overrun
199	AUE_NULL	NOPROTO	{ int nanosleep( \
				    const struct timespec *rqtp, \
				    struct timespec *rmtp); }
200	AUE_NULL	STD	{ int svr4_sys_facl(int fd, int cmd, \
				    int num, struct svr4_aclent *buf); }
201	AUE_NULL	UNIMPL	door
202	AUE_NULL	NOPROTO	{ int setreuid(int ruid, int euid); }
203	AUE_NULL	NOPROTO	{ int setregid(int rgid, int egid); }
204	AUE_NULL	UNIMPL	install_utrap
205	AUE_NULL	UNIMPL	signotify
206	AUE_NULL	UNIMPL	schedctl
207	AUE_NULL	UNIMPL	pset
208	AUE_NULL	UNIMPL	whoknows
209	AUE_NULL	STD	{ int svr4_sys_resolvepath(const char *path, \
				    char *buf, size_t bufsiz); }
210	AUE_NULL	UNIMPL	signotifywait
211	AUE_NULL	UNIMPL	lwp_sigredirect
212	AUE_NULL	UNIMPL	lwp_alarm
213	AUE_NULL	STD	{ int svr4_sys_getdents64(int fd, \
				    struct svr4_dirent64 *dp, int nbytes); }
;213	AUE_NULL	UNIMPL	getdents64
214	AUE_NULL	STD	{ caddr_t svr4_sys_mmap64(void *addr, \
				    svr4_size_t len, int prot, int flags, \
				    int fd, svr4_off64_t pos); }
215	AUE_NULL	STD	{ int svr4_sys_stat64(char *path, \
				    struct svr4_stat64 *sb); }
216	AUE_NULL	STD	{ int svr4_sys_lstat64(char *path, \
				    struct svr4_stat64 *sb); }
217	AUE_NULL	STD	{ int svr4_sys_fstat64(int fd, \
				    struct svr4_stat64 *sb); }
218	AUE_NULL	STD	{ int svr4_sys_statvfs64(char *path, \
				    struct svr4_statvfs64 *fs); }
219	AUE_NULL	STD	{ int svr4_sys_fstatvfs64(int fd, \
				    struct svr4_statvfs64 *fs); }
220	AUE_NULL	STD	{ int svr4_sys_setrlimit64(int which, \
				    const struct svr4_rlimit64 *rlp); }
221	AUE_NULL	STD	{ int svr4_sys_getrlimit64(int which, \
				    struct svr4_rlimit64 *rlp); }
222	AUE_NULL	UNIMPL	pread64
223	AUE_NULL	UNIMPL	pwrite64
224	AUE_NULL	STD	{ int svr4_sys_creat64(char *path, \
				    int mode); }
225	AUE_NULL	STD	{ int svr4_sys_open64(char *path, int flags, \
				    int mode); }
226	AUE_NULL	UNIMPL	rpcsys
227	AUE_NULL	UNIMPL	whoknows
228	AUE_NULL	UNIMPL	whoknows
229	AUE_NULL	UNIMPL	whoknows
230	AUE_NULL	STD	{ int svr4_sys_socket(int domain, int type, \
				    int protocol); }
231	AUE_NULL	NOPROTO	{ int socketpair(int domain, int type, \
				    int protocol, int *rsv); }
232	AUE_NULL	NOPROTO	{ int bind(int s, \
				    const struct sockaddr *name, \
				    int namelen); }
233	AUE_NULL	NOPROTO	{ int listen(int s, int backlog); }
234	AUE_NULL	NOPROTO	{ int accept(int s, struct sockaddr *name, \
				    int *anamelen); }
235	AUE_NULL	NOPROTO	{ int connect(int s, \
				    const struct sockaddr *name, \
				    int namelen); }
236	AUE_NULL	NOPROTO	{ int shutdown(int s, int how); }
237	AUE_NULL	STD	{ int svr4_sys_recv(int s, caddr_t buf, \
				    int len, int flags); }
238	AUE_NULL	NOPROTO	{ ssize_t recvfrom(int s, void *buf, \
				    size_t len, int flags, \
				    struct sockaddr *from, \
				    int *fromlenaddr); }
239	AUE_NULL	NOPROTO	{ ssize_t recvmsg(int s, struct msghdr *msg, \
				    int flags); }
240	AUE_NULL	STD	{ int svr4_sys_send(int s, caddr_t buf, \
				    int len, int flags); }
241	AUE_NULL	NOPROTO	{ ssize_t sendmsg(int s, \
				    const struct msghdr *msg, int flags); }
242	AUE_NULL	STD	{ ssize_t svr4_sys_sendto(int s, void *buf, \
				    size_t len, int flags, \
				    struct sockaddr *to, int tolen); }
243	AUE_NULL	NOPROTO	{ int getpeername(int fdes, \
				    struct sockaddr *asa, int *alen); }
244	AUE_NULL	NOPROTO	{ int getsockname(int fdes, \
				    struct sockaddr *asa, int *alen); }
245	AUE_NULL	NOPROTO	{ int getsockopt(int s, int level, int name, \
				    void *val, int *avalsize); }
246	AUE_NULL	NOPROTO	{ int setsockopt(int s, int level, int name, \
				    const void *val, int valsize); }
247	AUE_NULL	UNIMPL	sockconfig
248	AUE_NULL	UNIMPL	{ int ntp_gettime(struct ntptimeval *ntvp); }
249	AUE_NULL	UNIMPL	{ int ntp_adjtime(struct timex *tp); }
